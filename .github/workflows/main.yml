# This is a basic workflow to help you get started with Actions

name: CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains multiple jobs
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/prod/app.docker
          outputs: type=docker,dest=/tmp/myimage.tar
          tags: ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_IMAGE }}:latest
          cache-from: type=registry,ref=${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_IMAGE }}:buildcache,mode=max
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar
  tests:
    runs-on: ubuntu-latest
    needs: build
    services:
      # Label used to access the service container
      database:
        # Docker Hub image
        image: postgres:14-alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --name database
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Run tests
        run: |
          docker load --input /tmp/myimage.tar
          docker run --rm \
            --network ${{ job.services.database.network }} \
            --link database ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_IMAGE }}:latest php /var/www/html/artisan test
  deploy:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push to registry
        run: |
          docker load --input /tmp/myimage.tar
          docker push ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_IMAGE }}:latest
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          # VPS IP
          host: ${{ secrets.VPS_SSH_HOST }}
          # VPS username
          username: ${{ secrets.VPS_SSH_USERNAME }}
          # SSH key (copy it from your local machine)
          key: ${{ secrets.VPS_SSH_SECRET }}
          # SSH port
          # port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            cd ~/${{ secrets.REGISTRY_IMAGE }}
            echo "Stop"
            docker-compose run --rm app php artisan down
            echo "Pull new image"
            docker-compose pull
            echo "Restart the container"
            docker-compose up --force-recreate --build --no-deps -d
            echo "Run migrations and seeds"
            docker-compose run --rm app php artisan migrate --seed --force
            echo "Delete old image"
            docker image prune -f
